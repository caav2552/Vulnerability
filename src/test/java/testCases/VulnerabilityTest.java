package testCases;

import factoryRequest.FactoryRequest;
import factoryRequest.RequestInformation;
import factoryRequest.ResponseInformation;
import io.qameta.allure.*;
import org.json.JSONObject;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import utils.ConfigOwaspAPI;

public class VulnerabilityTest {
    private String idScanner;

    @DisplayName("Verify OWASP execution")
    @Description("This test case is to verify the start of the vulnerability scanner using OWASP")

    @Test
    public void startVulnerabilityScanner(){
        this.startScanning();
        this.monitoring();
    }

    @Step("Starting vulnerabilities scanning with ZAP")
    public void startScanning(){
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspAPI.START_SCAN+"http://todo.ly/");
        ResponseInformation responseInformation = FactoryRequest.make(FactoryRequest.RequestType.GET).send(information);
        JSONObject body = new JSONObject(responseInformation.getBody());
        String idScanner =body.get("scan").toString();
        System.out.println("************* ID " +idScanner);

    }

    @Step("Monitoring scan status up to complete to 100%")
    public void monitoring(){
        //#2 Verify scan status
        //If the scan is 100% go to generate reports
        String percentage = "0";
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspAPI.GET_STATUS+idScanner);
        while (!percentage.equals("100")){
            try {
                Thread.sleep(50000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ResponseInformation responseInformation = FactoryRequest.make(FactoryRequest.RequestType.GET).send(information);
            JSONObject body = new JSONObject(responseInformation.getBody());
            percentage =body.get("status").toString();
            System.out.println("STATUS ------> " + percentage);
        }
    }

    @AfterEach
    public void after(){
        //#3 Generate report
        RequestInformation information = new RequestInformation();
        information.setUrl(ConfigOwaspAPI.GET_REPORT);
        ResponseInformation responseInformation = FactoryRequest.make(FactoryRequest.RequestType.GET).send(information);
        this.attachmentFile("OWASP ZAP REPORT",responseInformation.getBody());

        //#4 Add vulnerabilities report types + #alerts
        information.setUrl(ConfigOwaspAPI.GET_ATTACK+idScanner);
        responseInformation = FactoryRequest.make(FactoryRequest.RequestType.GET).send(information);
        this.attachmentFile("Vulnerabilities list",responseInformation.getBody());
    }

    @Attachment(value ="{0}", type="text/html")
    public String attachmentFile(String name, String content){
        return content;
    }
}
